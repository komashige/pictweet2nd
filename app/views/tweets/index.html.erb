<!DOCTYPE html>
<html lang="en" data-bs-theme="auto">
  <head>
    <style>
      .btn-lightgreen {
          background: linear-gradient(to bottom, #7ee081, #4cd964);
          border: 1px solid #ccc;
      }

      .btn-lightgreen:hover {
          background-color: #76C976; /* ホバー時の色を少し濃くする */
          color: #fff; /* ホバー時の文字色を白にする */
      }

      .btn-danger {
          background: linear-gradient(to bottom, #d43f00, #dc3545);
          border: 1px solid #ccc;
      }

      .btn-warning {
          background: linear-gradient(to bottom, #ff9f00, #ffc107);
          border: 1px solid #ccc;
      }

      .btn-primary {
          background: linear-gradient(to bottom, #0069d9, #007bff);
          border: 1px solid #ccc;
      }

      .btn-success {
          background: linear-gradient(to bottom, #218838, #28a745);
          border: 1px solid #ccc;
      }

      .large-card {
          font-size: 1.5em; /* 文字の大きさを1.5倍に */
          border: 2px solid #ccc; /* 枠線の太さを2pxに */
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 影を追加 */
      }

      .double-size {
          transform: scale(2.5); /* 全体の大きさを2倍にする */
          transform-origin: top center; /* 変形の基点を中央上に設定 */
          margin-bottom: calc(180% + 30px); /* カードの高さ + 一定のスペース (例えば30px) */
      }

      /* カード内の画像の大きさも2倍にするための追加のスタイル */
      .double-size .card-img-top {
          width: 100%;   /* 画像の横幅をカードの幅に合わせる */
          height: 100%;  /* 画像の高さをカードの高さに合わせる */
          object-fit: cover; /* 画像がコンテナの枠内に収まるように調整 */
      }

      /* スマートフォンやタブレットでのスタイル */
      @media screen and (max-width: 1024px) {
        .double-size {
          transform: scale(1); /* 元の大きさに戻す */
          margin-bottom: 30px; /* 元のマージンに戻す */
        }
      }

      .margin-right-btn {
          margin-right: 120px; /* 10pxのマージンを右側に追加 */
      }

      /* 1. ボタンの角を丸くする */
      .btn-info, .btn-lightgreen.dropdown-toggle {
          border-radius: 20px; /* これによりボタンの角が丸くなります */
      }

      /* 2. 「拡大表示」ボタンをホバーしたときの文字色を白に変更 */
      .btn-info:hover {
          color: #fff; /* 文字色を白に変更 */
      }

      /* 3. 「拡大表示」ボタンの背景色を薄紫色のグラデーションに変更 */
      .btn-info {
          background: linear-gradient(to bottom, #d7aefb, #bb86fc); /* 薄紫色のグラデーション */
      }

      /* 「いらすと」のスタイル */
      .text-primary {
        font-family: '筑紫B丸ゴシック', sans-serif; /* 筑紫B丸ゴシックを指定 */
        font-size: 150px; /* 文字サイズを大きく */
        font-weight: bold; /* 文字の太さを太く */
        color: skyblue; /* 文字の色を水色に */
        text-shadow: 3px 3px 2px yellow; /* 細い縁取りに変更 */
      }

      /* 「あるばむ」のスタイル */
      .text-warning {
        font-family: 'Hiragino Maru Gothic ProN', sans-serif; /* ヒラギノ丸ゴProNを指定 */
        font-size: 130px; /* 文字サイズを大きく */
        font-weight: bold; /* 文字の太さを太く */
        color: yellow; /* 文字の色を黄色に */
        text-shadow: 3px 3px 2px black; /* 細い縁取りに変更 */
      }


      p.lead {
          font-family: '筑紫A丸ゴシック', sans-serif; /* 読みやすいフォントに */
          font-size: 1.5em; /* サイズを少し大きく */
          color: #666666; /* ソフトなグレー色に */
          text-shadow: 1px 1px 1px black; /* 細い縁取りに変更 */
      }

      /* 拡大表示ボタンのスタイル */
      .btn-info {
        border-radius: 10px; /* 角を丸くする */
        padding: 10px 20px; /* パディングを調整 */
        font-size: 16px; /* フォントサイズを調整 */
      }

      /* 編集・削除ボタンのスタイル */
      .btn-lightgreen {
        border-radius: 5px; /* 角を少し丸くする */
        padding: 5px 15px; /* パディングを調整 */
        font-size: 14px; /* フォントサイズを調整 */
      }

      .name {
        display: block; /* ブロック要素として表示 */
        margin-bottom: 10px; /* 下側のマージンを設定 */
        text-align: center; /* 中央揃え */
        font-weight: bold; /* フォントを太字に */
        color: #ff6600; /* 文字色（変更可能） */
        background-color: #f8f9fa; /* 背景色（変更可能） */
        font-family: '筑紫A丸ゴシック' , sans-serif; /* フォント（変更可能） */
        padding: 5px; /* 内側の余白（変更可能） */
      }

    </style>

  </head>
  <body>  
  <div class="background-image-container"></div>
<header data-bs-theme="dark">
  <div class="collapse text-bg-info" id="navbarHeader">
    <div class="container">
      <div class="row">
        <div class="col-sm-8 col-md-7 py-4">
          <h4>概要</h4>
          <p class="text-muted">以下のアルバムについて、制作者や背景情報などの情報を簡単に追加します。数文で情報提供し、読者が有益な情報を得られるようにします。</p>
        </div>
        <div class="col-sm-4 offset-md-1 py-4">
          
        </div>
      </div>
    </div>
  </div>
  <div class="navbar navbar-dark bg-info shadow-sm">
    <div class="container">
      <a href="#" class="navbar-brand d-flex align-items-center">
        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" aria-hidden="true" class="me-2" viewBox="0 0 24 24"><path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"/><circle cx="12" cy="13" r="4"/></svg>
        <strong>いらすとあるばむ</strong>
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarHeader" aria-controls="navbarHeader" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
    </div>
  </div>
</header>

<main>
  
    <section class="py-5 text-center container">
      <div class="row py-lg-5">
        <div class="col-lg-6 col-md-8 mx-auto">
          <h1 class="text-primary">いらすと</h1>
          <h1 class="text-warning">あるばむ</h1>
          <p class="lead text-body-black-50">自分の好きなイラストを描いた時に保存でき、アルバムのように一覧でみることができるツールです。使い方はそれ以外にもありそう！？
          </p>
          <% if user_signed_in? %>
            <div class="user_nav grid-6">
              <%= link_to "ログアウト", destroy_user_session_path, class: "btn btn-danger btn-lg", data: { turbo_method: :delete } %>
              <%= link_to "おえかきする", new_tweet_path, class: "btn btn-warning btn-lg" %>
            </div>
          <% else %>
            <div class="grid-6">
              <%= link_to "ログイン", new_user_session_path, class: "btn btn-primary btn-lg" %>
              <%= link_to "新規登録", new_user_registration_path, class: "btn btn-success btn-lg" %>
            </div>
          <% end %>

          <!-- これはログイン、新規登録のボタンの後に追加 -->
            <div class="row justify-content-center mt-5">
              <div class="col-md-6">
                  <div class="card large-card double-size">
                      <% latest_tweet = @tweets.first %>
                      <%= image_tag(latest_tweet.canvas_data) if latest_tweet&.canvas_data %>
                      <div class="card-body">
                          <p class="card-text"><%= latest_tweet.text if latest_tweet %></p>

                          <% if latest_tweet %>
                            <span class="name" style="font-size: 12px;">
                                <a href="/users/<%= latest_tweet.user.id %>">
                                  <span>投稿者</span><%= latest_tweet.user.nickname %>
                                </a>
                            </span>
                          <% end %>
                      </div>
                  </div>
              </div>
            </div>


        </div>
      </div>
    </section>
  
    <div class="album py-5 bg-body-tertiary">       
    <div class="container">
      <div class="row row-cols-1 row-cols-md-3 g-4">
        <% @tweets.each do |tweet| %>
          <div class="col">
            <div class="card h-100">
              <%= image_tag(tweet.canvas_data) if tweet.canvas_data %>
              <div class="card-body">
                <span class="name">                 
                    <a href="/users/<%= tweet.user.id %>">
                      <span>投稿者</span><%= tweet.user.nickname %>
                    </a>                 
                </span>
                <p class="card-text text-center"><%= tweet.text %></p>
                <div class="btn-group">
                <button class="btn btn-info margin-right-btn" onclick="setLargeCardData(this)">拡大表示</button>
                  <% if user_signed_in? && tweet.user_id == current_user.id %>                    
                    <button class="btn btn-lightgreen btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                      編集・削除
                    </button>
                  <% end %>
                  <ul class="dropdown-menu">
                    <div class="text-center">
                      
                    </div>
                    <div class="text-center">
                      <li><a class="dropdown-item">
                      <%= link_to "編集", edit_tweet_path(tweet.id), class: 'btn btn-primary'%>
                      <%= link_to '削除', tweet_path(tweet.id), data: { turbo_method: :delete }, class: 'btn btn-danger'%>
                      </a></li>

                    </div>
                  </ul>
                </div>
              </div>
              <div class="card-footer">
                <small class="text-body-secondary"><%= tweet.created_at.strftime('%Y-%m-%d %H:%M') %></small>  
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>
</main>
      
<footer class="text-body-secondary py-5">
  <div class="container">
    <p class="float-end mb-1">
      <a href="#">BACK TO TOP</a>
    </p>
    <p class="mb-1">いらすとあるばむ &copy; Bootstrap, but please download and customize it for yourself!</p>
    <p class="mb-0">New to Bootstrap? <a href="https://getbootstrap.com/">Visit the homepage</a> or read our <a href="https://getbootstrap.com/docs/5.2/getting-started/introduction/">getting started guide</a>.</p>
  </div>
</footer>

<script>
document.addEventListener("DOMContentLoaded", function() {
  // 最初のカード要素を取得
  const firstCard = document.querySelector('.card'); 
  // 最初のカードから情報を取得
  const imageSrc = firstCard.querySelector('img').getAttribute('src');
  const cardText = firstCard.querySelector('.card-text').textContent;
  const userHref = firstCard.querySelector('.name a').getAttribute('href');
  const userName = firstCard.querySelector('.name a').textContent;

  // 大きなカードの要素を取得して設定
  const largeCard = document.querySelector('.double-size');
  if (imageSrc) { // イメージが存在する場合のみ、src属性をセット
    largeCard.querySelector('img').setAttribute('src', imageSrc);
  }
  largeCard.querySelector('.card-text').textContent = cardText;
  // ユーザー情報の設定
  largeCard.querySelector('.name a').setAttribute('href', userHref);
  largeCard.querySelector('.name a').textContent = userName;
});

function setLargeCardData(clickedButton) {
  // クリックされたボタンを元にカード要素を取得
  const card = clickedButton.closest('.card');
  // カードから情報を取得
  const imageSrc = card.querySelector('img').getAttribute('src');
  const cardText = card.querySelector('.card-text').textContent;
  const userHref = card.querySelector('.name a').getAttribute('href');
  const userName = card.querySelector('.name a').textContent;

  // 2倍の大きさのカード要素を取得して設定
  const largeCard = document.querySelector('.double-size');
  largeCard.querySelector('img').setAttribute('src', imageSrc);
  largeCard.querySelector('.card-text').textContent = cardText;
  // ユーザー情報の更新
  largeCard.querySelector('.name a').setAttribute('href', userHref);
  largeCard.querySelector('.name a').textContent = userName;
  window.scrollTo({top: 0, behavior: 'smooth'});
}

</script>

</body>
</html>