<!DOCTYPE html>
<html>    

  <head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
          /* text_areaのスタイル */
        textarea {
            border: 10px solid green;  /* 枠線を緑色に */
            border-radius: 5px;      /* 角を少し丸く */
            padding: 5px;            /* 内側の余白を追加 */
            font-size: 16px;         /* テキストのサイズを指定 */
            width: 100%;             /* 幅を最大に */
        }
        
        /* 送信ボタンのスタイル */
        input[type="submit"] {
            background: linear-gradient(pink, red);  /* 背景色を青に */
            color: white;            /* 文字色を白に */
            border: none;            /* 枠線をなくす */
            border-radius: 5px;      /* 角を少し丸く */
            padding: 10px 15px;      /* 内側の余白を追加 */
            font-size: 18px;         /* フォントサイズを指定 */
            cursor: pointer;         /* ホバー時のカーソルを手の形に */
            transition: background-color 0.3s;  /* 背景色の変化を滑らかに */
            margin-bottom: 20px; /* 下部に20pxのスペースを追加 */
        }

        /* 送信ボタンをホバーしたときのスタイル */
        input[type="submit"]:hover {
            background-color: darkblue; /* 背景色を濃い青に */
        }

        h1 {
            text-align: center;             /* タイトルを中央に配置 */
            color: #333;                    /* 文字の色を暗い灰色に変更 */
            font-family: 'Georgia', serif;  /* フォントの種類をGeorgiaに変更 */
            margin-top: 50px;               /* 上側の間隔を50pxに設定 */
            margin-bottom: 20px;            /* h1とツールバーとの間のスペースを設定 */
        }

        #toolbar {          
            display: flex;        /* Flexboxを有効化 */
            justify-content: center; /* 子要素を水平方向の中央に配置 */
            width: 100vw;         /* コンテナの幅をビューポートの100%に設定 */  
            gap: 10px;            /* ボタン間の隙間を設定 */
        }
  
        #penTool, #eraserTool, #memoTool, #clearCanvas {
            /* 共通のスタイルはこちらに */
            font-size: 20px; 
            padding: 10px 20px; 
            border: 2px solid blue; 
            border-radius: 5px; 
            width: 150px; 
            height: 50px; 
            font-weight: bold;
        }

        #penTool {
            background: linear-gradient(lightblue, darkblue);
            color: white;
        }

        #eraserTool {
             background: linear-gradient(lightyellow, #f39800);
            color: black;
        }

        #memoTool {
            background: linear-gradient(lightgreen, darkgreen);
            color: white;
        }

         /* 追加するスタイル */
        #clearCanvas {
            background: linear-gradient(lightgray, darkgray);
            color: white;
        }

        /* 枠線のスタイルを調整 */
        .canvas-container {
          display: flex;
          align-items: center;
          justify-content: center;        
        }

        .textarea-container {
            width: 50%; /* キャンバスの幅の80% */
            margin-top: 20px; /* キャンバスとの間隔 */
            display: flex;
            justify-content: center; /* 中央に配置 */
        }

        .custom-textarea {
            border: 10px solid green;
            border-radius: 5px;
            padding: 5px;
            font-size: 16px;
            width: 100%; /* 親コンテナの幅に合わせる */
        }

         /* フォームのスタイルを調整 */
        form {
            text-align: center;
            margin-top: 10px; /* フォームとボタンの間のスペースを設定 */
        }
       

         /* キャンバスを中央に配置するスタイル */
        #drawingCanvas {
            background-color: white;
            display: block;
            border-radius: 10px;
            margin: 20px;
            align-items: center;
            position: relative;
            box-shadow: 0 0 0 20px #ffd700, /* 明るい金色 */
                        0 0 0 21px #d4af37, /* 暗めの金色 */
                        0 0 0 22px #ffd700; /* 再び明るい金色 */
        }       

        .pen-size {
            position: relative; /* 子要素の絶対配置の基準に */
            border-radius: 0%; /* ボタンの角を丸く */
            border: 1px solid #cccccc; /* 枠線を追加 */
            background-color: transparent; /* ボタンの背景を透明に設定 */
            cursor: pointer; /* ホバー時のカーソルをポインターに */
            display: inline-block; /* ボタンをインラインブロック要素として配置 */
            margin: 1px; /* 周囲の余白 */
            text-align: center; /* テキストを中央に配置 */
            line-height: 50px; /* ラインの高さをボタンの高さに合わせる */
            width: 30px; /* ボタンの幅 */
            height: 40px; /* ボタンの高さ */
            border-radius: 5px; /* 角を少し丸める */ 
        }
        /* 小さいボタン用のスタイル */
        .small-pen::after {
            content: ''; /* 疑似要素には内容が必要なので空の内容を設定 */
            position: absolute; /* 親要素に対して絶対配置 */
            top: 50%; /* 上から50%の位置に */
            left: 50%; /* 左から50%の位置に */
            width: 4px; /* 中の円の幅 */
            height: 4px; /* 中の円の高さ */
            background-color: #000; /* 中の円の背景色 */
            border-radius: 50%; /* 円形にする */
            transform: translate(-50%, -50%); /* 中心から左と上に50%ずらす */
        }
        /* 中サイズのボタン用のスタイル */
        .medium-pen::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 8px;
            height: 8px;
            background-color: #000;
            border-radius: 50%;
            transform: translate(-50%, -50%);
        }
         /* 大きいボタン用のスタイル */
        .large-pen::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 12px;
            height: 12px;
            background-color: #000;
            border-radius: 50%;
            transform: translate(-50%, -50%);
        }

        .eraser-button {
             position: relative; /* 子要素の絶対配置の基準に */
            border-radius: 0%; /* ボタンの角を丸く */
            border: 1px solid #cccccc; /* 枠線を追加 */
            background-color: transparent; /* ボタンの背景を透明に設定 */
            cursor: pointer; /* ホバー時のカーソルをポインターに */
            display: inline-block; /* ボタンをインラインブロック要素として配置 */
            margin: 1px; /* 周囲の余白 */
            text-align: center; /* テキストを中央に配置 */
            line-height: 50px; /* ラインの高さをボタンの高さに合わせる */
            width: 30px; /* ボタンの幅 */
            height: 40px; /* ボタンの高さ */
            border-radius: 5px; /* 角を少し丸める */ 
        }

        /* サイズ別のスタイリング */
        .small-eraser::before {
            content: ''; /* 内側の円形の作成に必要 */
            width: 10px; /* 小さい消しゴムの円のサイズ */
            height: 10px; /* 小さい消しゴムの円のサイズ */
            background-color: #fff; /* 内側の円の色 */
            border: 1px solid #000; /* 黒い縁取りを追加 */
            border-radius: 50%; /* 内側の円を円形に */
            position: absolute; /* ボタンの中央に配置するために必要 */
            top: 50%; /* 上から50%の位置に */
            left: 50%; /* 左から50%の位置に */
            transform: translate(-50%, -50%); /* 精確な中央配置のための調整 */
        }

        .large-eraser::before {
            content: '';
            width: 20px; /* 大サイズの消しゴムの円のサイズ */
            height: 20px; /* 大サイズの消しゴムの円のサイズ */
            background-color: #fff;
            border: 1px solid #000; /* 黒い縁取りを追加 */
            border-radius: 50%;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }


        /* モバイルデバイス（幅が768px未満の場合） */
        @media (max-width: 767px) {
            #drawingCanvas {
            max-width: 100vw; /* キャンバスのサイズを変更 */
            max-height: 100vh;
            }
            #toolbar button {
            padding: 5px 10px; /* ボタンのパディングを調整 */
            font-size: 16px; /* フォントサイズを小さく */
            }
            /* その他の要素も適宜調整 */
        }

        /* タブレットデバイス（幅が768px以上と1024px未満の場合） */
        @media (min-width: 768px) and (max-width: 1023px) {
            #drawingCanvas {
            max-width: 100vw; /* キャンバスのサイズを変更 */
            max-height: 100vh;
            }
            #toolbar button {
            padding: 8px 15px; /* ボタンのパディングを調整 */
            font-size: 18px; /* フォントサイズを調整 */
            }
            /* その他の要素も適宜調整 */
        }
        /* 色選択ボタンのスタイル */
        .button-container {
            display: flex;
            flex-direction: column; /* 縦に並べる */
            align-items: center; /* 中央揃え */
            gap: 10px; /* ボタン間の隙間 */
        }
        .color-button {
            font-size: 20px;
            padding: 10px 20px;
            border: 2px solid #000; /* 枠線を黒色に */
            border-radius: 5px;
            width: 50px; /* 幅を小さめに設定 */
            height: 50px; /* 高さを小さめに設定 */
            margin: 5px; /* 隙間を設定 */
            cursor: pointer;
        }

        /* 各色ごとの背景色を設定 */
        .red { background-color: red; }
        .orange { background-color: orange; }
        .yellow { background-color: yellow; }
        .green { background-color: green; }
        .lightgreen { background-color: lightgreen; }
        .blue { background-color: blue; }
        .skyblue { background-color: skyblue; }
        .purple { background-color: purple; }
        .black { background-color: black; }

         /* 太さ選択ボタンのテキストを非表示にする */
        .pen-size::after {
            content: ''; /* ボタン内のテキストを消すために空の内容を設定 */
        }

        /* ボタンホバー時の効果を追加 */
        .color-button:hover,
        .pen-size:hover,
        .eraser-button:hover {
            opacity: 0.8; /* ホバー時にボタンの透明度を下げる */
        }

        /* 追加スタイルが適用された状態でレイアウトを見やすくするために追加 */
        #toolbar {
            flex-wrap: wrap; /* ボタンが多い場合に折り返すように設定 */
        }

         .tool-group {
            display: inline-flex; /* ボタンをグループごとに横に並べる */
            flex-direction: row; /* グループ内を横に並べる */
            align-items: center; /* グループ内の要素を中央揃えに */
            border: 1px solid #ddd; /* グループの境界を示す */
            padding: 5px; /* 余白を設定 */
            margin-left: 10px; /* グループ間のスペースを設定 */
            margin-right: 10px;
            background-color: #e6e6e6; /* グループの背景色を設定 */
            border-radius: 5px; /* 角を少し丸める */
        }

        .tool-header {
            font-size: 16px; /* 見出しのサイズ */
            font-weight: bold; /* 見出しを太字に */
            margin-right: 5px; /* 見出しの右の余白 */
            text-align: center; /* 見出しを中央揃えに */
            margin-bottom: 5px; /* 見出しの下の余白 */
            background-color: #f2f2f2; /* 見出しの背景色 */
            padding: 5px; /* 見出しのパディング */
            border-radius: 5px; /* 角を少し丸める */
        }

        #penTool, #eraserTool, #memoTool, .pen-size, .eraser-button {
            /* 既存のスタイルを維持しつつ、背景色を追加 */
            background-color: #e6e6e6; /* ボタンの背景色 */
            /* 他のスタイルはそのまま */
        }

        /* 任意で、ホバー時の背景色の変化を追加することもできます */
        #penTool:hover, #eraserTool:hover, #memoTool:hover, .pen-size:hover, .eraser-button:hover {
            background-color: #cccccc; /* ホバー時の背景色 */
        }

        /* ペンと消しゴムのカーソル画像 */
        .pen-cursor {
        cursor: url('app/assets/images/鉛筆２_images.png'), auto;
        }

        .eraser-cursor {
        cursor: url('app/assets/images/消しゴム２_images.png'), auto;
        }

    </style>
  </head>

  <body>
    <div class="button-container">
        <div id="toolbar">
            <button id="penTool">ペン</button>
            <div class="tool-group">
                <div class="tool-header">線の太さ</div>
                <button id="smallPen" class="pen-size small-pen"></button>
                <button id="mediumPen" class="pen-size medium-pen"></button>
                <button id="largePen" class="pen-size large-pen"></button>
            </div>
            <button id="eraserTool">消しゴム</button>
            <div class="tool-group">
                <div class="tool-header">消しゴムの太さ</div>
                <button id="smallEraser" class="eraser-button small-eraser"></button>
                <button id="largeEraser" class="eraser-button large-eraser"></button>
            </div>
            <button id="memoTool">メモ</button>
            <button id="clearCanvas">クリア</button> <!-- ここにクリアボタンを追加 -->
        </div>

        <div>
            <!-- 色選択ボタン -->
            <button class="color-button red" data-color="#FF0000"></button>
            <button class="color-button orange" data-color="#FFA500"></button>
            <button class="color-button yellow" data-color="#FFFF00"></button>
            <button class="color-button green" data-color="#008000"></button>
            <button class="color-button lightgreen" data-color="#90EE90"></button>
            <button class="color-button blue" data-color="#0000FF"></button>
            <button class="color-button skyblue" data-color="#87CEEB"></button>
            <button class="color-button purple" data-color="#800080"></button>
            <button class="color-button black" data-color="#000000"></button>
        </div>
    </div>

    <!-- キャンバスを囲む枠線のdiv要素を追加 -->
    <div class="canvas-container">
        <canvas id="drawingCanvas" width="1000" height="1000"></canvas>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Canvas要素を取得
        const canvas = document.getElementById('drawingCanvas');
        const context = canvas.getContext('2d');
        context.lineWidth = 2; // 線の太さ

        // 描画ツールの初期設定
        let drawingTool = 'pen'; // 初期はペン
        let currentPenColor = 'black'; // 初期色を黒に設定
        // 線の太さを保持する変数
        let penSize = 2; // ペンの太さの初期値
        let eraserSize = 8; // 消しゴムの太さの初期値

        // 色選択ボタンのイベントリスナー
        document.querySelectorAll('.color-button').forEach(button => {
            button.addEventListener('click', function() {
                currentPenColor = this.getAttribute('data-color');
            });
        });

        // ペンツールボタンのクリックイベント
        document.getElementById('penTool').addEventListener('click', () => {
            drawingTool = 'pen';
            context.globalCompositeOperation = 'source-over'; // ペンモードに設定
            context.lineWidth = penSize; // ペンの太さを設定
            //context.strokeStyle = 'black'; // 描画色を黒に設定
        });

        // 小さいペンのボタンクリックイベント
        document.getElementById('smallPen').addEventListener('click', () => {
            penSize = 2; // ペンの太さを小に設定
            if(drawingTool === 'pen') {
                context.lineWidth = penSize;
            }
        });

        // 中くらいのペンのボタンクリックイベント
        document.getElementById('mediumPen').addEventListener('click', () => {
            penSize = 5; // ペンの太さを中に設定
            if(drawingTool === 'pen') {
                context.lineWidth = penSize;
            }
        });
        
        // 大きいペンのボタンクリックイベント
        document.getElementById('largePen').addEventListener('click', () => {
            penSize = 10; // ペンの太さを大に設定
            if(drawingTool === 'pen') {
                context.lineWidth = penSize;
            }
        });


        // 消しゴムツールボタンのクリックイベント
        document.getElementById('eraserTool').addEventListener('click', () => {
            drawingTool = 'eraser';
            context.globalCompositeOperation = 'destination-out'; // 消しゴムモードに設定
            context.lineWidth = eraserSize; // 消しゴムの太さを設定
        });

        document.getElementById('smallEraser').addEventListener('click', () => {
            eraserSize = 8; // 小さい消しゴムの太さに設定
            if(drawingTool === 'eraser') {
                context.lineWidth = eraserSize;
            }
        });

        document.getElementById('largeEraser').addEventListener('click', () => {
            eraserSize = 20; // 大きい消しゴムの太さに設定
            if(drawingTool === 'eraser') {
                context.lineWidth = eraserSize;
            }
        });

        let isMemoLinesVisible = false;  // メモの罫線が表示されているかどうかのフラグ
        const backupCanvas = document.createElement('canvas');  // オフスクリーンキャンバスの作成
        backupCanvas.width = canvas.width;
        backupCanvas.height = canvas.height;
        const backupContext = backupCanvas.getContext('2d');

        document.getElementById('memoTool').addEventListener('click', () => {
            drawingTool = 'none'; 

            if (isMemoLinesVisible) {
                // 罫線が表示されている場合、非表示にする
                context.clearRect(0, 0, canvas.width, canvas.height);
                context.drawImage(backupCanvas, 0, 0);
                isMemoLinesVisible = false;
            } else {
                // 罫線が非表示の場合、表示する
                // 現在のキャンバスの内容をバックアップ
                backupContext.clearRect(0, 0, backupCanvas.width, backupCanvas.height);
                backupContext.drawImage(canvas, 0, 0);

                context.drawImage(backupCanvas, 0, 0);
                drawMemoLines();
                isMemoLinesVisible = true;
            }
        });

        function drawMemoLines() {
           
            const dpi = window.devicePixelRatio * 96;
            const cmToPixels = dpi / 1.5;

            for(let y = cmToPixels; y < canvas.height; y += cmToPixels) {
                context.beginPath();
                context.moveTo(0, y);
                context.lineTo(canvas.width, y);
                context.strokeStyle = '#ddd';
                context.stroke();
            }
        }

        // 編集画面での再描画 //
        const image = new Image();
        image.src = "<%= tweet.canvas_data %>"; // 保存したcanvas_dataを取得
        image.onload = () => {
        context.drawImage(image, 0, 0);  // キャンバスに再描画
        };

        // マウスのイベントハンドラを追加
        let isDrawing = false;
        canvas.addEventListener('mousedown', (e) => {
            if (drawingTool !== 'pen' && drawingTool !== 'eraser') return;  // ここを追加
            isDrawing = true;
            context.beginPath();
            context.moveTo(e.clientX - canvas.getBoundingClientRect().left, e.clientY - canvas.getBoundingClientRect().top);
        });

        canvas.addEventListener('mousemove', (e) => {
            if (isDrawing) {
                if (drawingTool === 'pen') {
                    context.strokeStyle = currentPenColor; // 選択されたペンの色
                } else if (drawingTool === 'eraser') {
                    context.strokeStyle = 'white'; // 消しゴムは白色で塗りつぶす
                }
                context.lineTo(e.clientX - canvas.getBoundingClientRect().left, e.clientY - canvas.getBoundingClientRect().top);
                context.stroke();
            }
        });
        canvas.addEventListener('mouseup', () => {
            isDrawing = false;
        });

       
        document.querySelector('form').addEventListener('submit', (e) => {
            const canvasDataField = document.getElementById('canvasDataField');
            canvasDataField.value = canvas.toDataURL("image/png");
        });

        document.getElementById('clearCanvas').addEventListener('click', () => {
            // Main canvasの内容をクリア
            context.clearRect(0, 0, canvas.width, canvas.height);
            // backupCanvasの内容もクリア
            backupContext.clearRect(0, 0, backupCanvas.width, backupCanvas.height);
            isMemoLinesVisible = false; // 罫線表示もオフにする
            // 2. 隠しフィールドのcanvasデータをクリア
            document.getElementById('canvasDataField').value = '';
            
            // 3. テキストエリアの内容をクリア
            document.querySelector('textarea').value = '';
        });

        document.getElementById('penTool').addEventListener('click', function() {
            document.getElementById('drawingCanvas').classList.add('pen-cursor');
            document.getElementById('drawingCanvas').classList.remove('eraser-cursor');
        });

        document.getElementById('eraserTool').addEventListener('click', function() {
            document.getElementById('drawingCanvas').classList.add('eraser-cursor');
            document.getElementById('drawingCanvas').classList.remove('pen-cursor');
        });
    });
    </script>


    <%= form_with(model: tweet, data: { turbo: false }, local: true) do |form| %>
        <%= form.hidden_field :canvas_data, id: "canvasDataField" %>

        <div class="textarea-container">
            <%= form.text_area :text, placeholder: "コメントしてね〜", rows: "10", class: "custom-textarea" %>
        </div>

        <%= form.submit "保存するよ〜" %>
    <% end %>

  </body>
</html>